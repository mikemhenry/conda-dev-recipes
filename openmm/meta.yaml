{% if CUDA_SHORT_VERSION is defined %}
{% set CUDA_STR = "_cuda" + CUDA_SHORT_VERSION %}
{% elif OSX_ARCH is defined %}
{% set CUDA_STR = "" %}
{% else %}
{% set CUDA_STR = "_nocuda" %}
{% endif %}

package:
  name: openmm
  version: 7.4.1

source:
  git_url: https://github.com/openmm/openmm.git
#  patches:
#    - silent-cmake.patch
#    - silent-doxygen.patch
#    - silent-latexpdf.patch

extra:
  #upload: betacuda{{ CUDA_SHORT_VERSION }}{{ ",beta" if CUDA_SHORT_VERSION == "92" else ""}}
  #upload: devcuda{{ CUDA_SHORT_VERSION }}{{ ",dev" if CUDA_SHORT_VERSION == "92" else ""}}
  upload: {{ CUDA_STR[1:] }}
  force_upload: True

build:
  number: 0
  #skip: True # [win]
  detect_binary_files_with_prefix: False
  #string: py{{ py }}_cuda{{ CUDA_SHORT_VERSION }}_{{ environ.get("GIT_DESCRIBE_HASH", "")[1:8] }}_1 # this doesn't work with conda-build-all
  string: py{{ py }}{{ CUDA_STR }}_{{ PKG_BUILDNUM }}
  #features:
  #  - cuda{{ CUDA_SHORT_VERSION }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - cmake
    - jom      # [win]

  host:
    - python
    - fftw
    - swig
    - pthread-stubs
    - lxml
    - numpy
    - cython
    - doxygen 1.8.14
    # docs
    - pydot
    - sphinx
    - sphinxcontrib-bibtex
    - sphinxcontrib-lunrsearch >=0.3
    - sphinxcontrib-autodoc_doxygen
  run:
    - python
    - fftw
    - numpy

test:
  imports:
    - simtk
    - simtk.openmm
  commands:
    - python -m simtk.testInstallation
    # Existence tests Unix
    - test -f $PREFIX/lib/libOpenMM$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMCPU$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMOpenCL$SHLIB_EXT  # [unix]
    - test -f $PREFIX/lib/plugins/libOpenMMCUDA$SHLIB_EXT  # [linux]
    # Existence tests Windows
    - if not exist %LIBRARY_LIB%/OpenMM.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMOpenCL.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%/plugins/OpenMMCPU.lib exit 1  # [win]
    # Run a small MD
    - cd $CONDA_PREFIX/share/openmm/examples 
    - python benchmark.py --test=rf --seconds=10 --platform=Reference
    - python benchmark.py --test=rf --seconds=10 --platform=CPU
    - python benchmark.py --test=rf --seconds=10 --platform=OpenCL
    - python benchmark.py --test=rf --seconds=10 --platform=CUDA  # [not osx]


about:
  home: http://openmm.org
  license: MIT
  summary: A high performance toolkit for molecular simulation.
